{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sures\\\\OneDrive\\\\Desktop\\\\react practice\\\\react\\\\src\\\\components\\\\PlayButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport useRecorder from '../hooks/useRecorder';\nimport '../styles/PlayButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayButton = () => {\n  _s();\n  const [isRunning, setIsRunning] = useState(false);\n  const {\n    playAutomation\n  } = useRecorder();\n  const handlePlay = async () => {\n    if (isRunning) return;\n    setIsRunning(true);\n    try {\n      const success = await playAutomation();\n      if (success) {\n        alert('Automation completed successfully!');\n      } else {\n        alert('Automation failed.');\n      }\n    } catch (error) {\n      console.error('Error running automation:', error);\n      alert(`Error running automation: ${error.message}`);\n    } finally {\n      setIsRunning(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `play ${isRunning ? 'running' : ''}`,\n    onClick: handlePlay,\n    disabled: isRunning,\n    title: \"Run Automation\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayButton, \"MxYwoYpdsf7pKg0NOnWwkNwKqZ0=\", false, function () {\n  return [useRecorder];\n});\n_c = PlayButton;\nexport default PlayButton;\nvar _c;\n$RefreshReg$(_c, \"PlayButton\");","map":{"version":3,"names":["React","useState","useRecorder","jsxDEV","_jsxDEV","PlayButton","_s","isRunning","setIsRunning","playAutomation","handlePlay","success","alert","error","console","message","className","onClick","disabled","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sures/OneDrive/Desktop/react practice/react/src/components/PlayButton.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport useRecorder from '../hooks/useRecorder';\r\nimport '../styles/PlayButton.css';\r\n\r\nconst PlayButton = () => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const { playAutomation } = useRecorder();\r\n\r\n  const handlePlay = async () => {\r\n    if (isRunning) return;\r\n    \r\n    setIsRunning(true);\r\n    \r\n    try {\r\n      const success = await playAutomation();\r\n      \r\n      if (success) {\r\n        alert('Automation completed successfully!');\r\n      } else {\r\n        alert('Automation failed.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error running automation:', error);\r\n      alert(`Error running automation: ${error.message}`);\r\n    } finally {\r\n      setIsRunning(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button \r\n      className={`play ${isRunning ? 'running' : ''}`}\r\n      onClick={handlePlay}\r\n      disabled={isRunning}\r\n      title=\"Run Automation\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlayButton; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAEQ;EAAe,CAAC,GAAGP,WAAW,CAAC,CAAC;EAExC,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAIH,SAAS,EAAE;IAEfC,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF,MAAMG,OAAO,GAAG,MAAMF,cAAc,CAAC,CAAC;MAEtC,IAAIE,OAAO,EAAE;QACXC,KAAK,CAAC,oCAAoC,CAAC;MAC7C,CAAC,MAAM;QACLA,KAAK,CAAC,oBAAoB,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDD,KAAK,CAAC,6BAA6BC,KAAK,CAACE,OAAO,EAAE,CAAC;IACrD,CAAC,SAAS;MACRP,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEJ,OAAA;IACEY,SAAS,EAAE,QAAQT,SAAS,GAAG,SAAS,GAAG,EAAE,EAAG;IAChDU,OAAO,EAAEP,UAAW;IACpBQ,QAAQ,EAAEX,SAAU;IACpBY,KAAK,EAAC;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEN,CAAC;AAACjB,EAAA,CAjCID,UAAU;EAAA,QAEaH,WAAW;AAAA;AAAAsB,EAAA,GAFlCnB,UAAU;AAmChB,eAAeA,UAAU;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}